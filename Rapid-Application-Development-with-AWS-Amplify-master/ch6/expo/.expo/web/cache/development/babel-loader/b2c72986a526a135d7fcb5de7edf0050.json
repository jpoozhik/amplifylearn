{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/adventvr/Workspaces/aws-amplify-hands-on/ch6/expo3/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { StatusBar } from 'expo-status-bar';\nimport styles from \"./AppStyles\";\nimport Amplify, { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport * as mutations from \"./src/graphql/mutations\";\nimport * as queries from \"./src/graphql/queries\";\nimport * as subscriptions from \"./src/graphql/subscriptions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { S3Image } from \"aws-amplify-react-native\";\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n\nvar App = function App() {\n  var defaultPostState = {\n    id: \"\",\n    title: \"\",\n    content: \"\",\n    image: \"\"\n  };\n\n  var _useState = useState(defaultPostState),\n      _useState2 = _slicedToArray(_useState, 2),\n      postState = _useState2[0],\n      setPostState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      posts = _useState4[0],\n      setPosts = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      createSectionState = _useState6[0],\n      setCreateSectionState = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      updateSectionState = _useState8[0],\n      setUpdateSectionState = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      img = _useState10[0],\n      setImg = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      permission = _useState12[0],\n      setPermission = _useState12[1];\n\n  var onImageUploadChange = function onImageUploadChange() {\n    var imageFile, file, fileName, contentType;\n    return _regeneratorRuntime.async(function onImageUploadChange$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              quality: 1\n            }));\n\n          case 3:\n            imageFile = _context2.sent;\n\n            if (!imageFile.cancelled) {\n              file = imageFile.uri;\n              fileName = file.replace(/^.*[\\\\\\/]/, \"\");\n              contentType = fileName.split(\".\").pop().toLowerCase();\n              setInput(\"image\", fileName);\n              Storage.put(fileName, file, {\n                contentType: \"image/\" + contentType\n              }).then(function _callee(result) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        console.log(\"result.key\", result.key);\n                        _context.t0 = setImg;\n                        _context.next = 4;\n                        return _regeneratorRuntime.awrap(Storage.get(result.key));\n\n                      case 4:\n                        _context.t1 = _context.sent;\n                        (0, _context.t0)(_context.t1);\n                        console.log(\"onImageUploadChange result:\", result);\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (err) {\n                return console.error(err);\n              });\n            }\n\n            console.log(\"onImageUploadChange imageFile:\", imageFile);\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(\"onImageUploadChange err:\", _context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var getPermissionAsync = function getPermissionAsync() {\n    var _await$ImagePicker$re, status;\n\n    return _regeneratorRuntime.async(function getPermissionAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(Platform.OS !== \"web\" && !permission)) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 3:\n            _await$ImagePicker$re = _context3.sent;\n            status = _await$ImagePicker$re.status;\n            setPermission(status == \"granted\" ? true : false);\n\n            if (!permission) {\n              alert(\"Sorry, we need camera roll permissions to make this work!\");\n            }\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getPermissionAsync();\n    fetchPosts();\n  }, []);\n\n  var fetchPosts = function fetchPosts() {\n    var postData, _posts;\n\n    return _regeneratorRuntime.async(function fetchPosts$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            console.log(\"fetching posts\");\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(queries.listPosts)));\n\n          case 4:\n            postData = _context4.sent;\n            _posts = postData.data.listPosts.items;\n            setPosts(_posts);\n            _context4.next = 12;\n            break;\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(\"error fetching posts: \", _context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var createSubscription = API.graphql(graphqlOperation(subscriptions.onCreatePost));\n  createSubscription.subscribe({\n    next: function next(postData) {\n      console.log(\"onCreatePost\", postData);\n      fetchPosts();\n    }\n  });\n  var updateSubscription = API.graphql(graphqlOperation(subscriptions.onUpdatePost));\n  updateSubscription.subscribe({\n    next: function next(postData) {\n      console.log(\"onUpdatePost\", postData);\n      fetchPosts();\n    }\n  });\n  var deleteSubscription = API.graphql(graphqlOperation(subscriptions.onDeletePost));\n  deleteSubscription.subscribe({\n    next: function next(postData) {\n      console.log(\"onDeletePost\", postData);\n      fetchPosts();\n    }\n  });\n\n  var setInput = function setInput(key, value) {\n    setPostState(_objectSpread(_objectSpread({}, postState), {}, _defineProperty({}, key, value)));\n  };\n\n  var createPost = function createPost() {\n    var post, result;\n    return _regeneratorRuntime.async(function createPost$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n\n            if (!(!postState.title || !postState.content)) {\n              _context5.next = 3;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 3:\n            post = _objectSpread({}, postState);\n            console.log(\"creating post\", post);\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(mutations.createPost, {\n              input: {\n                title: post.title,\n                content: post.content,\n                image: post.image\n              }\n            })));\n\n          case 7:\n            result = _context5.sent;\n            setPosts([].concat(_toConsumableArray(posts), [post]));\n            setPostState(defaultPostState);\n            console.log(\"created post\", result);\n            _context5.next = 16;\n            break;\n\n          case 13:\n            _context5.prev = 13;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(\"error creating post:\", _context5.t0);\n\n          case 16:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  var updatePost = function updatePost() {\n    var post, result;\n    return _regeneratorRuntime.async(function updatePost$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n\n            if (!(!postState.title || !postState.content)) {\n              _context6.next = 3;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 3:\n            post = _objectSpread({}, postState);\n            console.log(\"updating post\", post);\n            _context6.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(mutations.updatePost, {\n              input: {\n                id: post.id,\n                title: post.title,\n                content: post.content\n              }\n            })));\n\n          case 7:\n            result = _context6.sent;\n            setUpdateSectionState(false);\n            setCreateSectionState(true);\n            console.log(\"updated post\", result);\n            setPostState(defaultPostState);\n            _context6.next = 17;\n            break;\n\n          case 14:\n            _context6.prev = 14;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(\"error updating post:\", _context6.t0);\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n\n  var deletePost = function deletePost(postID) {\n    var result;\n    return _regeneratorRuntime.async(function deletePost$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n\n            if (postID) {\n              _context7.next = 3;\n              break;\n            }\n\n            return _context7.abrupt(\"return\");\n\n          case 3:\n            console.log(\"deleting post\", postID);\n            _context7.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(mutations.deletePost, {\n              input: {\n                id: postID\n              }\n            })));\n\n          case 6:\n            result = _context7.sent;\n            console.log(\"deleted post\", result);\n            _context7.next = 13;\n            break;\n\n          case 10:\n            _context7.prev = 10;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log(\"error deleting post:\", _context7.t0);\n\n          case 13:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  var findPosts = function findPosts(title) {\n    var postData, _posts2;\n\n    return _regeneratorRuntime.async(function findPosts$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            console.log(\"finding posts:\", title);\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(queries.listPosts, {\n              filter: {\n                title: {\n                  contains: title\n                }\n              }\n            })));\n\n          case 4:\n            postData = _context8.sent;\n            console.log(\"found posts:\");\n            _posts2 = postData.data.listPosts.items;\n            setPosts(_posts2);\n            _context8.next = 13;\n            break;\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(\"error finding posts \", _context8.t0);\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.safeArea\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(val) {\n      return findPosts(val);\n    },\n    style: styles.input,\n    placeholder: \"Search\"\n  }), createSectionState ? React.createElement(View, null, React.createElement(Text, {\n    style: styles.title\n  }, \"Create Post\"), React.createElement(View, null, React.createElement(Text, {\n    style: styles.button,\n    onPress: function onPress() {\n      onImageUploadChange();\n    }\n  }, \"Pick an image from camera roll\"), img ? React.createElement(Image, {\n    source: {\n      uri: img\n    },\n    style: {\n      width: 320,\n      height: 200\n    }\n  }) : null), React.createElement(TextInput, {\n    onChangeText: function onChangeText(val) {\n      return setInput(\"title\", val);\n    },\n    style: styles.input,\n    value: postState.title,\n    placeholder: \"Title\"\n  }), React.createElement(TextInput, {\n    onChangeText: function onChangeText(val) {\n      return setInput(\"content\", val);\n    },\n    style: styles.textArea,\n    value: postState.content,\n    placeholder: \"Content\"\n  }), React.createElement(Text, {\n    style: styles.button,\n    onPress: createPost\n  }, \"Create Post\")) : null, updateSectionState ? React.createElement(View, null, React.createElement(Text, {\n    style: styles.title\n  }, \"Update Post\"), React.createElement(TextInput, {\n    onChangeText: function onChangeText(val) {\n      return setInput(\"title\", val);\n    },\n    style: styles.input,\n    value: postState.title,\n    placeholder: \"Title\"\n  }), React.createElement(TextInput, {\n    onChangeText: function onChangeText(val) {\n      return setInput(\"content\", val);\n    },\n    style: styles.textArea,\n    value: postState.content,\n    placeholder: \"Content\"\n  }), React.createElement(Text, {\n    style: styles.button,\n    onPress: updatePost\n  }, \"Update Post\")) : null, React.createElement(ScrollView, {\n    style: styles.scrollView\n  }, posts.map(function (post, index) {\n    return React.createElement(View, {\n      key: post.id ? post.id : index,\n      style: styles.post\n    }, React.createElement(S3Image, {\n      imgKey: post.image\n    }), React.createElement(Text, {\n      style: styles.postTitle\n    }, post.title, \" \", post.image), React.createElement(Text, {\n      style: styles.postContent\n    }, post.content), React.createElement(View, {\n      style: {\n        flexDirection: \"row\"\n      }\n    }, React.createElement(Text, {\n      style: styles.postUpdate,\n      onPress: function onPress() {\n        setPostState(post);\n        setUpdateSectionState(true);\n        setCreateSectionState(false);\n      }\n    }, \"Update\"), React.createElement(Text, {\n      style: styles.postDelete,\n      onPress: function onPress() {\n        deletePost(post.id);\n      }\n    }, \"Delete\")));\n  })), React.createElement(StatusBar, {\n    style: \"auto\"\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/adventvr/Workspaces/aws-amplify-hands-on/ch6/expo3/App.tsx"],"names":["React","useEffect","useState","StatusBar","styles","Amplify","API","graphqlOperation","Storage","mutations","queries","subscriptions","ImagePicker","S3Image","awsExports","configure","App","defaultPostState","id","title","content","image","postState","setPostState","posts","setPosts","createSectionState","setCreateSectionState","updateSectionState","setUpdateSectionState","img","setImg","permission","setPermission","onImageUploadChange","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","quality","imageFile","cancelled","file","uri","fileName","replace","contentType","split","pop","toLowerCase","setInput","put","then","result","console","log","key","get","catch","err","error","getPermissionAsync","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","fetchPosts","graphql","listPosts","postData","data","items","createSubscription","onCreatePost","subscribe","next","updateSubscription","onUpdatePost","deleteSubscription","onDeletePost","value","createPost","post","input","updatePost","deletePost","postID","findPosts","filter","contains","safeArea","container","val","button","width","height","textArea","scrollView","map","index","postTitle","postContent","flexDirection","postUpdate","postDelete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, SetStateAction } from \"react\";\nimport {\n  View,\n  Text,\n  SafeAreaView,\n  ScrollView,\n  Image,\n  TextInput,\n  Platform,\n} from \"react-native\";\nimport { StatusBar } from 'expo-status-bar';\nimport styles from \"./AppStyles\";\nimport Amplify, { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport * as mutations from \"./src/graphql/mutations\";\nimport * as queries from \"./src/graphql/queries\";\nimport * as subscriptions from \"./src/graphql/subscriptions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport { S3Image } from \"aws-amplify-react-native\";\n\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n\nconst App = () => {\n  const defaultPostState = { id: \"\", title: \"\", content: \"\", image: \"\" };\n  // Post\n  const [postState, setPostState] = useState(defaultPostState);\n  const [posts, setPosts] = useState([]);\n  // Create post section\n  const [createSectionState, setCreateSectionState] = useState(true);\n  // Update post section\n  const [updateSectionState, setUpdateSectionState] = useState(false);\n  //image upload\n  const [img, setImg] = useState(\"\");\n  const [permission, setPermission] = useState(false);\n\n  const onImageUploadChange = async () => {\n    try {\n\n      let imageFile = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: true,\n        quality: 1,\n      });\n      \n      if (!imageFile.cancelled) {\n        const file: string = imageFile.uri;\n        const fileName: string = file.replace(/^.*[\\\\\\/]/, \"\");\n        const contentType: any = fileName.split(\".\").pop().toLowerCase();\n        setInput(\"image\", fileName);\n        Storage.put(fileName, file, {\n          contentType: \"image/\" + contentType,\n        })\n          .then(async (result: any) => {\n            console.log(\"result.key\", result.key);\n            setImg((await Storage.get(result.key)) as string);\n            console.log(\"onImageUploadChange result:\", result);\n          })\n          .catch((err) => console.error(err));\n      }\n      console.log(\"onImageUploadChange imageFile:\", imageFile);\n    } catch (err) {\n      console.error(\"onImageUploadChange err:\", err);\n    }\n  };\n\n  const getPermissionAsync = async () => {\n\n    if (Platform.OS !== \"web\" && !permission) {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      setPermission(status == \"granted\" ? true : false);\n      if (!permission) {\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\n      }\n    }\n  };\n\n  useEffect(() => {\n    getPermissionAsync();\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async (): Promise<any> => {\n    try {\n      console.log(\"fetching posts\");\n      const postData: any = await API.graphql(\n        graphqlOperation(queries.listPosts)\n      );\n      const posts: any = postData.data.listPosts.items;\n      setPosts(posts);\n    } catch (err) {\n      console.log(\"error fetching posts: \", err);\n    }\n  };\n\n  const createSubscription: any = API.graphql(\n    graphqlOperation(subscriptions.onCreatePost)\n  );\n  createSubscription.subscribe({\n    next: (postData: any) => {\n      console.log(\"onCreatePost\", postData);\n      fetchPosts();\n    },\n  });\n\n  const updateSubscription: any = API.graphql(\n    graphqlOperation(subscriptions.onUpdatePost)\n  );\n  updateSubscription.subscribe({\n    next: (postData: any) => {\n      console.log(\"onUpdatePost\", postData);\n      fetchPosts();\n    },\n  });\n  const deleteSubscription: any = API.graphql(\n    graphqlOperation(subscriptions.onDeletePost)\n  );\n  deleteSubscription.subscribe({\n    next: (postData: any) => {\n      console.log(\"onDeletePost\", postData);\n      fetchPosts();\n    },\n  });\n\n  const setInput = (key: any, value: any): any => {\n    setPostState({ ...postState, [key]: value });\n  };\n\n  const createPost = async (): Promise<any> => {\n    try {\n      if (!postState.title || !postState.content) return;\n      const post = { ...postState };\n      console.log(\"creating post\", post);\n      const result = await API.graphql(\n        graphqlOperation(mutations.createPost, {\n          input: {\n            title: post.title,\n            content: post.content,\n            image: post.image,\n          },\n        })\n      );\n      setPosts([...posts, post] as SetStateAction<never[]>);\n      setPostState(defaultPostState);\n      console.log(\"created post\", result);\n    } catch (err) {\n      console.log(\"error creating post:\", err);\n    }\n  };\n\n  const updatePost = async (): Promise<any> => {\n    try {\n      if (!postState.title || !postState.content) return;\n      const post = { ...postState };\n      console.log(\"updating post\", post);\n      const result = await API.graphql(\n        graphqlOperation(mutations.updatePost, {\n          input: {\n            id: post.id,\n            title: post.title,\n            content: post.content,\n          },\n        })\n      );\n      setUpdateSectionState(false);\n      setCreateSectionState(true);\n      console.log(\"updated post\", result);\n      setPostState(defaultPostState);\n    } catch (err) {\n      console.log(\"error updating post:\", err);\n    }\n  };\n\n  const deletePost = async (postID: string): Promise<any> => {\n    try {\n      if (!postID) return;\n      console.log(\"deleting post\", postID);\n      const result = await API.graphql(\n        graphqlOperation(mutations.deletePost, {\n          input: {\n            id: postID,\n          },\n        })\n      );\n      console.log(\"deleted post\", result);\n    } catch (err) {\n      console.log(\"error deleting post:\", err);\n    }\n  };\n\n  const findPosts = async (title: string): Promise<any> => {\n    try {\n      console.log(\"finding posts:\", title);\n      const postData: any = await API.graphql(\n        graphqlOperation(queries.listPosts, {\n          filter: {\n            title: {\n              contains: title,\n            },\n          },\n        })\n      );\n      console.log(\"found posts:\");\n      const posts: any = postData.data.listPosts.items;\n      setPosts(posts);\n    } catch (err) {\n      console.log(\"error finding posts \", err);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.safeArea}>\n      <View style={styles.container}>\n        <TextInput\n          onChangeText={(val) => findPosts(val)}\n          style={styles.input}\n          placeholder=\"Search\"\n        />\n        {createSectionState ? (\n          <View>\n            <Text style={styles.title}>Create Post</Text>\n            <View>\n              <Text\n                style={styles.button}\n                onPress={() => {\n                  onImageUploadChange();\n                }}\n              >\n                Pick an image from camera roll\n              </Text>\n              {img ? (\n                <Image\n                  source={{ uri: img }}\n                  style={{ width: 320, height: 200 }}\n                />\n              ) : null}\n            </View>\n            <TextInput\n              onChangeText={(val) => setInput(\"title\", val)}\n              style={styles.input}\n              value={postState.title}\n              placeholder=\"Title\"\n            />\n            <TextInput\n              onChangeText={(val) => setInput(\"content\", val)}\n              style={styles.textArea}\n              value={postState.content}\n              placeholder=\"Content\"\n            />\n            <Text style={styles.button} onPress={createPost}>\n              Create Post\n            </Text>\n          </View>\n        ) : null}\n\n        {updateSectionState ? (\n          <View>\n            <Text style={styles.title}>Update Post</Text>\n            <TextInput\n              onChangeText={(val) => setInput(\"title\", val)}\n              style={styles.input}\n              value={postState.title}\n              placeholder=\"Title\"\n            />\n            <TextInput\n              onChangeText={(val) => setInput(\"content\", val)}\n              style={styles.textArea}\n              value={postState.content}\n              placeholder=\"Content\"\n            />\n            <Text style={styles.button} onPress={updatePost}>\n              Update Post\n            </Text>\n          </View>\n        ) : null}\n\n        <ScrollView style={styles.scrollView}>\n          {posts.map((post: any, index: any) => (\n            <View key={post.id ? post.id : index} style={styles.post}>\n              <S3Image imgKey={post.image} />\n              <Text style={styles.postTitle}>\n                {post.title} {post.image}\n              </Text>\n              <Text style={styles.postContent}>{post.content}</Text>\n              <View style={{ flexDirection: \"row\" }}>\n                <Text\n                  style={styles.postUpdate}\n                  onPress={() => {\n                    setPostState(post);\n                    setUpdateSectionState(true);\n                    setCreateSectionState(false);\n                  }}\n                >\n                  Update\n                </Text>\n                <Text\n                  style={styles.postDelete}\n                  onPress={() => {\n                    deletePost(post.id);\n                  }}\n                >\n                  Delete\n                </Text>\n              </View>\n            </View>\n          ))}\n        </ScrollView>\n        <StatusBar style=\"auto\" />\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}